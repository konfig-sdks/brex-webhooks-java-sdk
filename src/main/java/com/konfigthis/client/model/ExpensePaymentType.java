/*
 * Webhooks API
 *  Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage. Use webhook subscriptions to subscribe to different webhook events. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &#x60;PURCHASE&#x60;: A pending transaction for making a purchase.  &#x60;REFUND&#x60;: A pending transaction for a refund.  &#x60;WITHDRAWAL&#x60;: A pending transaction for a withdrawal.  &#x60;DECLINED&#x60;: A pending transaction that was declined and will not be completed. 
 */
@JsonAdapter(ExpensePaymentType.Adapter.class)public enum ExpensePaymentType {
  
  PURCHASE("PURCHASE"),
  
  REFUND("REFUND"),
  
  WITHDRAWAL("WITHDRAWAL"),
  
  DECLINED("DECLINED");

  private String value;

  ExpensePaymentType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ExpensePaymentType fromValue(String value) {
    for (ExpensePaymentType b : ExpensePaymentType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ExpensePaymentType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ExpensePaymentType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ExpensePaymentType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ExpensePaymentType.fromValue(value);
    }
  }
}

