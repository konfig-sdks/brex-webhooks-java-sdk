/*
 * Webhooks API
 *  Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage. Use webhook subscriptions to subscribe to different webhook events. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Only ACH, DOMESTIC_WIRE, CHEQUE, INTERNATIONAL_WIRE and BOOK_TRANSFER details can be retrieved from the Payments API.
 */
@JsonAdapter(PaymentType.Adapter.class)public enum PaymentType {
  
  ACH("ACH"),
  
  DOMESTIC_WIRE("DOMESTIC_WIRE"),
  
  CHEQUE("CHEQUE"),
  
  INTERNATIONAL_WIRE("INTERNATIONAL_WIRE"),
  
  BOOK_TRANSFER("BOOK_TRANSFER"),
  
  ACH_RETURN("ACH_RETURN"),
  
  WIRE_RETURN("WIRE_RETURN"),
  
  CHEQUE_RETURN("CHEQUE_RETURN");

  private String value;

  PaymentType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PaymentType fromValue(String value) {
    for (PaymentType b : PaymentType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PaymentType> {
    @Override
    public void write(final JsonWriter jsonWriter, final PaymentType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PaymentType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PaymentType.fromValue(value);
    }
  }
}

