/*
 * Webhooks API
 *  Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage. Use webhook subscriptions to subscribe to different webhook events. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Application status of a product.  &#x60;NO_ACCOUNT&#x60; - There is no active application, and the product account is not provisioned.  &#x60;ACTIVE&#x60; - The application is approved, and the product account is provisioned.  &#x60;NOT_SUBMITTED&#x60; - The application is started but not yet submitted.  &#x60;INFORMATION_PENDING&#x60; - The application is submitted and additional information is requested.  &#x60;MANUAL_REVIEW&#x60; - The application is under manual review.  &#x60;PROCESSING&#x60; - The application is submitted and is under review.  &#x60;REJECTED&#x60; - The application is rejected.  &#x60;CLOSED&#x60; - The product account is closed. 
 */
@JsonAdapter(ApplicationStatus.Adapter.class)public enum ApplicationStatus {
  
  NO_ACCOUNT("NO_ACCOUNT"),
  
  ACTIVE("ACTIVE"),
  
  NOT_SUBMITTED("NOT_SUBMITTED"),
  
  INFORMATION_PENDING("INFORMATION_PENDING"),
  
  MANUAL_REVIEW("MANUAL_REVIEW"),
  
  PROCESSING("PROCESSING"),
  
  REJECTED("REJECTED"),
  
  CLOSED("CLOSED");

  private String value;

  ApplicationStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ApplicationStatus fromValue(String value) {
    for (ApplicationStatus b : ApplicationStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ApplicationStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final ApplicationStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ApplicationStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ApplicationStatus.fromValue(value);
    }
  }
}

