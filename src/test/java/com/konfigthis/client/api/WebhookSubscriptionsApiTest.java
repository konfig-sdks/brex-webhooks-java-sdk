/*
 * Webhooks API
 *  Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage. Use webhook subscriptions to subscribe to different webhook events. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateWebhookSubscriptionRequest;
import com.konfigthis.client.model.PageWebhookSubscription;
import com.konfigthis.client.model.UpdateWebhookSubscriptionRequest;
import com.konfigthis.client.model.UpdateWebhookSubscriptionStatus;
import com.konfigthis.client.model.WebhookEventType;
import com.konfigthis.client.model.WebhookSecret;
import com.konfigthis.client.model.WebhookSubscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookSubscriptionsApi
 */
@Disabled
public class WebhookSubscriptionsApiTest {

    private static WebhookSubscriptionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhookSubscriptionsApi(apiClient);
    }

    /**
     * Get Webhook
     *
     * Get details of a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String id = null;
        WebhookSubscription response = api.getDetails(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Webhooks
     *
     * List the webhooks you have registered
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        PageWebhookSubscription response = api.list()
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List Webhook Secrets
     *
     *  This endpoint returns a set of webhook signing secrets used to validate the webhook. Usually only one key will be returned in the response. After key rotation, this endpoint will return two keys: the new key, and the key that will be revoked soon. There will also be two signatures in the &#39;Webhook-Signature&#39; request header. Your application should use all keys available to validate the webhook request. If validation passes for any of the keys returned, the webhook payload is valid. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecretsTest() throws ApiException {
        List<WebhookSecret> response = api.listSecrets()
                .execute();
        // TODO: test validations
    }

    /**
     * Register Webhook
     *
     * Register an endpoint to start receiving selected webhook events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerEndpointTest() throws ApiException {
        String url = null;
        List<WebhookEventType> eventTypes = null;
        String idempotencyKey = null;
        WebhookSubscription response = api.registerEndpoint(url, eventTypes, idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Unregister Webhook
     *
     * Unregister a webhook if you want to stop receiving webhook events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterWebhookTest() throws ApiException {
        String id = null;
        api.unregisterWebhook(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Webhook
     *
     * Update a webhook. You can update the endpoint url, event types that the endpoint receives, or temporarily deactivate the webhook. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        String url = null;
        List<WebhookEventType> eventTypes = null;
        UpdateWebhookSubscriptionStatus status = null;
        String id = null;
        WebhookSubscription response = api.updateWebhook(url, eventTypes, status, id)
                .execute();
        // TODO: test validations
    }

}
