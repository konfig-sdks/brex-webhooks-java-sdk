openapi: 3.0.1
info:
  contact:
    email: developer-access@brex.com
    name: Admin
    url: https://brex.com
  description: |2

    Brex uses webhooks to send real-time notifications when events happen in the accounts that you manage.
    Use webhook subscriptions to subscribe to different webhook events.
  title: Webhooks API
  version: "0.1"
  x-konfig-has-globally-required-security: true
servers:
- description: Production
  url: https://platform.brexapis.com
- description: "Staging (Note: This is not a sandbox. It will not work with customer\
    \ tokens.)"
  url: https://platform.staging.brexapps.com
security:
- OAuth2: []
tags:
- description: Manage webhook subscriptions.
  name: Webhook Subscriptions
paths:
  /v1/webhooks:
    get:
      description: List the webhooks you have registered
      operationId: WebhookSubscriptions_list
      parameters:
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_WebhookSubscription_'
          description: listSubscription 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: List Webhooks
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--v1-webhooks
      x-accepts: application/json
    post:
      description: Register an endpoint to start receiving selected webhook events
      operationId: WebhookSubscriptions_registerEndpoint
      parameters:
      - explode: false
        in: header
        name: Idempotency-Key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookSubscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
          description: createSubscription 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: Register Webhook
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--v1-webhooks
      x-content-type: application/json
      x-accepts: application/json
  /v1/webhooks/secrets:
    get:
      description: |2

        This endpoint returns a set of webhook signing secrets used to validate the webhook.
        Usually only one key will be returned in the response. After key rotation, this endpoint will return two keys:
        the new key, and the key that will be revoked soon. There will also be two signatures in the 'Webhook-Signature' request header.
        Your application should use all keys available to validate the webhook request. If validation passes for any
        of the keys returned, the webhook payload is valid.
      operationId: WebhookSubscriptions_listSecrets
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscriptionsListSecretsResponse'
          description: listSecrets 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: List Webhook Secrets
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--v1-webhooks-secrets
      x-accepts: application/json
  /v1/webhooks/{id}:
    delete:
      description: Unregister a webhook if you want to stop receiving webhook events
      operationId: WebhookSubscriptions_unregisterWebhook
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: deleteSubscription 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: Unregister Webhook
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-delete--v1-webhooks-id
      x-accepts: application/json
    get:
      description: Get details of a webhook
      operationId: WebhookSubscriptions_getDetails
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
          description: getSubscriptionById 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: Get Webhook
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--v1-webhooks-id
      x-accepts: application/json
    put:
      description: |
        Update a webhook.
        You can update the endpoint url, event types that the endpoint receives, or temporarily deactivate the webhook.
      operationId: WebhookSubscriptions_updateWebhook
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookSubscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
          description: updateSubscription 200 response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
      summary: Update Webhook
      tags:
      - Webhook Subscriptions
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-put--v1-webhooks-id
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    ApplicationStatus:
      description: |
        Application status of a product.

        `NO_ACCOUNT` - There is no active application, and the product account is not provisioned.

        `ACTIVE` - The application is approved, and the product account is provisioned.

        `NOT_SUBMITTED` - The application is started but not yet submitted.

        `INFORMATION_PENDING` - The application is submitted and additional information is requested.

        `MANUAL_REVIEW` - The application is under manual review.

        `PROCESSING` - The application is submitted and is under review.

        `REJECTED` - The application is rejected.

        `CLOSED` - The product account is closed.
      enum:
      - NO_ACCOUNT
      - ACTIVE
      - NOT_SUBMITTED
      - INFORMATION_PENDING
      - MANUAL_REVIEW
      - PROCESSING
      - REJECTED
      - CLOSED
      type: string
    CreateWebhookSubscriptionRequest:
      example:
        event_types:
        - null
        - null
        url: url
      properties:
        url:
          type: string
        event_types:
          description: |-
            The Brex API sends webhooks for the events listed below.
            For more details, see the [webhook guide](https://developer.brex.com/openapi/webhooks_api/) and
            [webhook events API reference](https://developer.brex.com/openapi/webhooks_api/).
          items:
            $ref: '#/components/schemas/WebhookEventType'
          required:
          - "true"
          type: array
      required:
      - event_types
      - url
      type: object
    ExpensePaymentEvent: {}
    ExpensePaymentStatus:
      description: |
        `PENDING`:The transaction is yet to be captured. It may be approved, yet to be approved, or yet to be declined.

        `DECLINED`: The transaction was declined.
      enum:
      - PENDING
      - DECLINED
      type: string
    ExpensePaymentStatusUpdatedEvent:
      description: |-
        The webhook will be sent when an expense payment changes status.
        Account must be on Brex Empower to receive these events. Subscription must be registered with a user with the CARD_ADMIN role.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        expense_id:
          type: string
        payment_status:
          $ref: '#/components/schemas/ExpensePaymentStatus'
        payment_type:
          $ref: '#/components/schemas/ExpensePaymentType'
        company_id:
          description: |2

            This is the `id` returned in the [Get Company](https://developer.brex.com/openapi/webhooks_api/) endpoint.
            You can use the `company_id` to determine which access token to use when you get the details from our API endpoints.
          type: string
        amount:
          $ref: '#/components/schemas/ExpensePaymentStatusUpdatedEvent_amount'
        payment_description:
          description: The name of the card acceptor.
          type: string
        card_id:
          description: The ID of the card that is associated with the expense.
          type: string
      required:
      - event_type
      - expense_id
      - payment_status
      - payment_type
      type: object
    ExpensePaymentType:
      description: |
        `PURCHASE`: A pending transaction for making a purchase.

        `REFUND`: A pending transaction for a refund.

        `WITHDRAWAL`: A pending transaction for a withdrawal.

        `DECLINED`: A pending transaction that was declined and will not be completed.
      enum:
      - PURCHASE
      - REFUND
      - WITHDRAWAL
      - DECLINED
      type: string
    Money:
      description: |2

        Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive). The amount of money will be represented in the smallest denomination
        of the currency indicated. For example, USD 7.00 will be represented in cents with an amount of 700.
      properties:
        amount:
          description: "The amount of money, in the smallest denomination of the currency\
            \ indicated by currency. For example, when currency is USD, amount is\
            \ in cents."
          format: int64
          type: integer
        currency:
          description: "The type of currency, in ISO 4217 format. Default to USD if\
            \ not specified"
          nullable: true
          type: string
      type: object
    Page_WebhookSubscription_:
      example:
        next_cursor: next_cursor
        items:
        - event_types:
          - null
          - null
          id: id
          url: url
          status: null
        - event_types:
          - null
          - null
          id: id
          url: url
          status: null
      properties:
        next_cursor:
          nullable: true
          type: string
        items:
          items:
            $ref: '#/components/schemas/WebhookSubscription'
          type: array
      required:
      - items
      type: object
      x-konfig-is-used-in-successful-response: true
    PaymentType:
      description: "Only ACH, DOMESTIC_WIRE, CHEQUE, INTERNATIONAL_WIRE and BOOK_TRANSFER\
        \ details can be retrieved from the Payments API."
      enum:
      - ACH
      - DOMESTIC_WIRE
      - CHEQUE
      - INTERNATIONAL_WIRE
      - BOOK_TRANSFER
      - ACH_RETURN
      - WIRE_RETURN
      - CHEQUE_RETURN
      type: string
    ProductApplication:
      properties:
        cash:
          $ref: '#/components/schemas/ApplicationStatus'
      required:
      - cash
      type: object
    ReferralActivatedEvent:
      description: The webhook will be sent when a user signs up with the referral
        link.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        referral_id:
          type: string
      required:
      - event_type
      - referral_id
      type: object
    ReferralApplicationStatusChangedEvent:
      description: The webhook will be sent when the application status is changed.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        referral_id:
          type: string
        application:
          $ref: '#/components/schemas/ProductApplication'
      required:
      - application
      - event_type
      - referral_id
      type: object
    ReferralCreatedEvent:
      description: The webhook will be sent when a referral is created.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        referral_id:
          type: string
      required:
      - event_type
      - referral_id
      type: object
    ReferralEvent: {}
    TransferEvent: {}
    TransferFailedEvent:
      description: The webhook will be sent when a transfer failed.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        transfer_id:
          type: string
        payment_type:
          $ref: '#/components/schemas/PaymentType'
        return_for_id:
          description: "The original transaction ID that is returned when the payment\
            \ type is ACH_RETURN, WIRE_RETURN and CHEQUE_RETURN."
          nullable: true
          type: string
        company_id:
          description: |2

            This is the `id` returned in the [Get Company](https://developer.brex.com/openapi/webhooks_api/) endpoint.
            You can use the `company_id` to determine which access token to use when you get the details from our API endpoints.
          type: string
      required:
      - event_type
      - payment_type
      - transfer_id
      type: object
    TransferProcessedEvent:
      description: The webhook will be sent when a transfer is processed.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        transfer_id:
          type: string
        payment_type:
          $ref: '#/components/schemas/PaymentType'
        return_for_id:
          description: "The original transaction ID that is returned when the payment\
            \ type is ACH_RETURN, WIRE_RETURN and CHEQUE_RETURN."
          nullable: true
          type: string
        company_id:
          description: |2

            This is the `id` returned in the [Get Company](https://developer.brex.com/openapi/webhooks_api/) endpoint.
            You can use the `company_id` to determine which access token to use when you get the details from our API endpoints.
          type: string
      required:
      - event_type
      - payment_type
      - transfer_id
      type: object
    UpdateWebhookSubscriptionRequest:
      example:
        event_types:
        - null
        - null
        url: url
        status: null
      properties:
        url:
          type: string
        event_types:
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          $ref: '#/components/schemas/UpdateWebhookSubscriptionStatus'
      required:
      - event_types
      - status
      - url
      type: object
    UpdateWebhookSubscriptionStatus:
      enum:
      - ACTIVE
      - INACTIVE
      type: string
    UserAttributes:
      enum:
      - STATUS
      - MANAGER_ID
      - DEPARTMENT_ID
      - LOCATION_ID
      type: string
    UserEvent: {}
    UserUpdatedEvent:
      description: The webhook will be sent when a user is updated.
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        user_id:
          type: string
        company_id:
          type: string
        updated_attributes:
          items:
            $ref: '#/components/schemas/UserAttributes'
          type: array
      required:
      - company_id
      - event_type
      - updated_attributes
      - user_id
      type: object
    WebhookEventType:
      enum:
      - REFERRAL_CREATED
      - REFERRAL_ACTIVATED
      - REFERRAL_APPLICATION_STATUS_CHANGED
      - TRANSFER_PROCESSED
      - TRANSFER_FAILED
      - EXPENSE_PAYMENT_UPDATED
      - USER_UPDATED
      type: string
    WebhookSecret:
      example:
        secret: secret
        status: null
      properties:
        secret:
          type: string
        status:
          $ref: '#/components/schemas/WebhookSecretStatus'
      required:
      - secret
      - status
      type: object
    WebhookSecretStatus:
      enum:
      - ACTIVE
      - PENDING_REVOKE
      type: string
    WebhookSubscription:
      example:
        event_types:
        - null
        - null
        id: id
        url: url
        status: null
      properties:
        id:
          type: string
        url:
          type: string
        event_types:
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          $ref: '#/components/schemas/WebhookSubscriptionStatus'
      required:
      - event_types
      - id
      - status
      - url
      type: object
      x-konfig-is-used-in-successful-response: true
    WebhookSubscriptionStatus:
      enum:
      - ACTIVE
      - INACTIVE
      - ERROR
      type: string
    WebhookSubscriptionsListSecretsResponse:
      items:
        $ref: '#/components/schemas/WebhookSecret'
      type: array
      x-konfig-is-used-in-successful-response: true
    konfig-generated-schema-single-parameter-schema-get--v1-webhooks:
      properties:
        cursor:
          nullable: true
          type: string
        limit:
          format: int32
          nullable: true
          type: integer
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - cursor
      - limit
    konfig-generated-schema-single-parameter-schema-post--v1-webhooks:
      properties:
        Idempotency-Key:
          type: string
        url:
          type: string
        event_types:
          description: |-
            The Brex API sends webhooks for the events listed below.
            For more details, see the [webhook guide](https://developer.brex.com/openapi/webhooks_api/) and
            [webhook events API reference](https://developer.brex.com/openapi/webhooks_api/).
          items:
            $ref: '#/components/schemas/WebhookEventType'
          required:
          - "true"
          type: array
      required:
      - Idempotency-Key
      - event_types
      - url
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - Idempotency-Key
    konfig-generated-schema-single-parameter-schema-get--v1-webhooks-secrets:
      properties: {}
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter: []
    konfig-generated-schema-single-parameter-schema-delete--v1-webhooks-id:
      properties:
        id:
          type: string
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--v1-webhooks-id:
      properties:
        id:
          type: string
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-put--v1-webhooks-id:
      properties:
        id:
          type: string
        url:
          type: string
        event_types:
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        status:
          $ref: '#/components/schemas/UpdateWebhookSubscriptionStatus'
      required:
      - event_types
      - id
      - status
      - url
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    ExpensePaymentStatusUpdatedEvent_amount:
      allOf:
      - $ref: '#/components/schemas/Money'
      - nullable: true
  securitySchemes:
    OAuth2:
      description: OAuth2 security scheme
      flows:
        authorizationCode:
          authorizationUrl: https://accounts-api.brex.com/oauth2/default/v1/authorize
          scopes:
            openid: openid
            offline_access: offline access
          tokenUrl: https://accounts-api.brex.com/oauth2/default/v1/token
        clientCredentials:
          scopes:
            openid: openid
            offline_access: offline access
          tokenUrl: https://accounts-api.brex.com/oauth2/default/v1/token
      type: oauth2
      x-konfig-globally-required-security: true
x-webhooks:
  x-webhooks/expensePayments:
    post:
      tags:
      - Webhook Events
      summary: Expense Payment Events
      operationId: expensePaymentUpdatedEvents
      security:
      - OAuth2:
        - expenses.card.readonly
        - expenses.card
      description: |-
        Expense Payment Events. Transaction activity for expenses made on Brex Card.

        Account must be on Brex Empower to receive these events. Webhook subscription must be registered using a token from a user with Card Admin role.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpensePaymentEvent'
      responses:
        "200":
          description: Return this code if the callback was received and processed
            successfully
  x-webhooks/referrals:
    post:
      tags:
      - Webhook Events
      summary: Referral Events
      operationId: referralEvent
      security:
      - OAuth2:
        - https://onboarding.brexapis.com/referrals
      description: "Referral Events. Reference the [Onboarding API](https://developer.brex.com/openapi/webhooks_api/)\
        \ for event details."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferralEvent'
      responses:
        "200":
          description: Return this code if the callback was received and processed
            successfully
  x-webhooks/transfers:
    post:
      tags:
      - Webhook Events
      summary: Transfer Events
      operationId: transferEvents
      security:
      - OAuth2:
        - transfers.readonly
        - transfers
      description: "Transfer Events for both incoming and outgoing Brex Cash transactions.\
        \ Reference the [Payments API](https://developer.brex.com/openapi/webhooks_api/)\
        \ for event details."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferEvent'
      responses:
        "200":
          description: Return this code if the callback was received and processed
            successfully
  x-webhooks/users:
    post:
      tags:
      - Webhook Events
      summary: User Updated Events
      operationId: userEvent
      security:
      - OAuth2:
        - users.readonly
        - users
      description: User Updated Events. All accounts can receive user status update
        while only accounts on Brex Empower can receive non-user-status updates.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEvent'
      responses:
        "200":
          description: Return this code if the callback was received and processed
            successfully
x-explorer-enabled: false

